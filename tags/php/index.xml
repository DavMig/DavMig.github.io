<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Php on Zaft Memory Core</title><link>https://davmig.github.io/tags/php/</link><description>Recent content in Php on Zaft Memory Core</description><generator>Hugo</generator><language>en-us</language><lastBuildDate>Wed, 11 Jan 2017 18:39:17 +0000</lastBuildDate><atom:link href="https://davmig.github.io/tags/php/index.xml" rel="self" type="application/rss+xml"/><item><title>php的闭包特性</title><link>https://davmig.github.io/posts/2017-01-11-php-lambada/</link><pubDate>Wed, 11 Jan 2017 18:39:17 +0000</pubDate><guid>https://davmig.github.io/posts/2017-01-11-php-lambada/</guid><description>&lt;p>闭包和匿名函数在&lt;code>PHP 5.3.0&lt;/code>引入，并且PHP将两者视为相同的概念。闭包其实是伪装成函数的对象，它的实质其实是&lt;code>Closure&lt;/code>实例。&lt;/p>
&lt;p>创建闭包非常简单：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-php" data-lang="php">&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1&lt;/span>&lt;span>&lt;span style="color:#8be9fd;font-style:italic">$c&lt;/span> &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#ff79c6">function&lt;/span>(&lt;span style="color:#8be9fd;font-style:italic">$name&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2&lt;/span>&lt;span> &lt;span style="color:#ff79c6">return&lt;/span> sprintf(&lt;span style="color:#f1fa8c">&amp;#34;Hello World! Hello %s!&amp;#34;&lt;/span>, &lt;span style="color:#8be9fd;font-style:italic">$name&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3&lt;/span>&lt;span>};
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5&lt;/span>&lt;span>&lt;span style="color:#ff79c6">echo&lt;/span> &lt;span style="color:#8be9fd;font-style:italic">$c&lt;/span>(&lt;span style="color:#f1fa8c">&amp;#39;PHP&amp;#39;&lt;/span>);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>使用&lt;code>use&lt;/code>对闭包附加状态，多个参数使用&lt;code>,&lt;/code>分隔：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-php" data-lang="php">&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1&lt;/span>&lt;span>&lt;span style="color:#ff79c6">function&lt;/span> &lt;span style="color:#50fa7b">callPerson&lt;/span>(&lt;span style="color:#8be9fd;font-style:italic">$name&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2&lt;/span>&lt;span> &lt;span style="color:#ff79c6">return&lt;/span> &lt;span style="color:#ff79c6">function&lt;/span>(&lt;span style="color:#8be9fd;font-style:italic">$about&lt;/span>) &lt;span style="color:#ff79c6">use&lt;/span> (&lt;span style="color:#8be9fd;font-style:italic">$name&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3&lt;/span>&lt;span> &lt;span style="color:#ff79c6">return&lt;/span> sprintf(&lt;span style="color:#f1fa8c">&amp;#34;%s, %s&amp;#34;&lt;/span>, &lt;span style="color:#8be9fd;font-style:italic">$name&lt;/span>, &lt;span style="color:#8be9fd;font-style:italic">$about&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4&lt;/span>&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5&lt;/span>&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">6&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">7&lt;/span>&lt;span>&lt;span style="color:#8be9fd;font-style:italic">$triver&lt;/span> &lt;span style="color:#ff79c6">=&lt;/span> callPerson(&lt;span style="color:#f1fa8c">&amp;#39;Triver&amp;#39;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">8&lt;/span>&lt;span>&lt;span style="color:#ff79c6">echo&lt;/span> &lt;span style="color:#8be9fd;font-style:italic">$triver&lt;/span>(&lt;span style="color:#f1fa8c">&amp;#34;slow down, please!!&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>附加的变量会被封装到闭包内，即使返回的闭包队形已经跳出了&lt;code>callPerson()&lt;/code>的作用域也仍然会记住&lt;code>$name&lt;/code>的值。&lt;/p></description></item><item><title>composer中的autoload</title><link>https://davmig.github.io/posts/2016-11-05-php-composer-autoload/</link><pubDate>Sat, 05 Nov 2016 02:42:06 +0000</pubDate><guid>https://davmig.github.io/posts/2016-11-05-php-composer-autoload/</guid><description>&lt;p>composer的autoload可以轻松的实现php的自动加载。在&lt;code>composer.json&lt;/code>中添加&lt;code>autoload&lt;/code>字段即可。当前支持 &lt;code>PSR-0&lt;/code> &lt;code>PSR-4&lt;/code> &lt;code>classmap&lt;/code>解析和&lt;code>files&lt;/code>包含。官方推荐PSR-4标准（添加类时不需要重新生成加载器）。&lt;/p>
&lt;h3 id="psr-4">PSR-4&lt;/h3>
&lt;p>Under the &lt;code>psr-4&lt;/code> key you define a mapping from namespaces to paths, relative to the package root. When autoloading a class like &lt;code>Foo\\Bar\\Baz&lt;/code> a namespace prefix &lt;code>Foo\\&lt;/code> pointing to a directory &lt;code>src/&lt;/code> means that the autoloader will look for a file named &lt;code>src/Bar/Baz.php&lt;/code> and include it if present. Note that as opposed to the older PSR-0 style, the prefix (&lt;code>Foo\\&lt;/code>) is not present in the file path.&lt;/p></description></item></channel></rss>