<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>JavaScript on Zaft Memory Core</title><link>https://davmig.github.io/tags/javascript/</link><description>Recent content in JavaScript on Zaft Memory Core</description><generator>Hugo</generator><language>en-us</language><lastBuildDate>Sun, 10 Nov 2019 09:00:00 +0000</lastBuildDate><atom:link href="https://davmig.github.io/tags/javascript/index.xml" rel="self" type="application/rss+xml"/><item><title>JavaScript URI エンコーディング</title><link>https://davmig.github.io/posts/2019-11-10-encodeuricomponent/</link><pubDate>Sun, 10 Nov 2019 09:00:00 +0000</pubDate><guid>https://davmig.github.io/posts/2019-11-10-encodeuricomponent/</guid><description>&lt;h2 id="まとめ">まとめ&lt;/h2>
&lt;p>&lt;code>encodeURI()&lt;/code>と&lt;code>encodeURIComponent()&lt;/code>はRFC 2396準拠である。
&lt;code>encodeURI()&lt;/code> は完全な URI を表すのに必要な文字 (Reserved Characters) はエンコードしません。
また、予約されていないが &amp;ldquo;そのまま&amp;rdquo; URI に使用できる(Unreserved Marks) 文字をエンコードしません。
&lt;code>encodeURIComponent()&lt;/code> は &amp;ldquo;Unreserved Marks&amp;rdquo; 文字をエンコードしません。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-JavaScript" data-lang="JavaScript">&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1&lt;/span>&lt;span>&lt;span style="color:#8be9fd;font-style:italic">var&lt;/span> set1 &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34;;,/?:@&amp;amp;=+$#&amp;#34;&lt;/span>; &lt;span style="color:#6272a4">// Reserved Characters
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2&lt;/span>&lt;span>&lt;span style="color:#6272a4">&lt;/span>&lt;span style="color:#8be9fd;font-style:italic">var&lt;/span> set2 &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#f1fa8c">&amp;#34;-_.!~*&amp;#39;()&amp;#34;&lt;/span>; &lt;span style="color:#6272a4">// Unreserved Marks
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3&lt;/span>&lt;span>&lt;span style="color:#6272a4">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">4&lt;/span>&lt;span>console.log(&lt;span style="color:#8be9fd;font-style:italic">encodeURI&lt;/span>(set1)); &lt;span style="color:#6272a4">// ;,/?:@&amp;amp;=+$
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">5&lt;/span>&lt;span>&lt;span style="color:#6272a4">&lt;/span>console.log(&lt;span style="color:#8be9fd;font-style:italic">encodeURI&lt;/span>(set2)); &lt;span style="color:#6272a4">// -_.!~*&amp;#39;()
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">6&lt;/span>&lt;span>&lt;span style="color:#6272a4">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">7&lt;/span>&lt;span>console.log(&lt;span style="color:#8be9fd;font-style:italic">encodeURIComponent&lt;/span>(set1)); &lt;span style="color:#6272a4">// %3B%2C%2F%3F%3A%40%26%3D%2B%24
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">8&lt;/span>&lt;span>&lt;span style="color:#6272a4">&lt;/span>console.log(&lt;span style="color:#8be9fd;font-style:italic">encodeURIComponent&lt;/span>(set2)); &lt;span style="color:#6272a4">// -_.!~*&amp;#39;()
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="rfc2396-appendix-a">rfc2396 appendix-A&lt;/h2>
&lt;p>&lt;a href="https://tools.ietf.org/html/rfc2396#appendix-A">https://tools.ietf.org/html/rfc2396#appendix-A&lt;/a>&lt;/p>
&lt;pre tabindex="0">&lt;code>URI-reference = [ absoluteURI | relativeURI ] [ &amp;#34;#&amp;#34; fragment ]
 absoluteURI = scheme &amp;#34;:&amp;#34; ( hier_part | opaque_part )
 relativeURI = ( net_path | abs_path | rel_path ) [ &amp;#34;?&amp;#34; query ]

 hier_part = ( net_path | abs_path ) [ &amp;#34;?&amp;#34; query ]
 opaque_part = uric_no_slash *uric

 uric_no_slash = unreserved | escaped | &amp;#34;;&amp;#34; | &amp;#34;?&amp;#34; | &amp;#34;:&amp;#34; | &amp;#34;@&amp;#34; |
 &amp;#34;&amp;amp;&amp;#34; | &amp;#34;=&amp;#34; | &amp;#34;+&amp;#34; | &amp;#34;$&amp;#34; | &amp;#34;,&amp;#34;

 net_path = &amp;#34;//&amp;#34; authority [ abs_path ]
 abs_path = &amp;#34;/&amp;#34; path_segments
 rel_path = rel_segment [ abs_path ]

 rel_segment = 1*( unreserved | escaped |
 &amp;#34;;&amp;#34; | &amp;#34;@&amp;#34; | &amp;#34;&amp;amp;&amp;#34; | &amp;#34;=&amp;#34; | &amp;#34;+&amp;#34; | &amp;#34;$&amp;#34; | &amp;#34;,&amp;#34; )

 scheme = alpha *( alpha | digit | &amp;#34;+&amp;#34; | &amp;#34;-&amp;#34; | &amp;#34;.&amp;#34; )

 authority = server | reg_name

 reg_name = 1*( unreserved | escaped | &amp;#34;$&amp;#34; | &amp;#34;,&amp;#34; |
 &amp;#34;;&amp;#34; | &amp;#34;:&amp;#34; | &amp;#34;@&amp;#34; | &amp;#34;&amp;amp;&amp;#34; | &amp;#34;=&amp;#34; | &amp;#34;+&amp;#34; )

 server = [ [ userinfo &amp;#34;@&amp;#34; ] hostport ]
 userinfo = *( unreserved | escaped |
 &amp;#34;;&amp;#34; | &amp;#34;:&amp;#34; | &amp;#34;&amp;amp;&amp;#34; | &amp;#34;=&amp;#34; | &amp;#34;+&amp;#34; | &amp;#34;$&amp;#34; | &amp;#34;,&amp;#34; )

 hostport = host [ &amp;#34;:&amp;#34; port ]
 host = hostname | IPv4address
 hostname = *( domainlabel &amp;#34;.&amp;#34; ) toplabel [ &amp;#34;.&amp;#34; ]
 domainlabel = alphanum | alphanum *( alphanum | &amp;#34;-&amp;#34; ) alphanum
 toplabel = alpha | alpha *( alphanum | &amp;#34;-&amp;#34; ) alphanum
 IPv4address = 1*digit &amp;#34;.&amp;#34; 1*digit &amp;#34;.&amp;#34; 1*digit &amp;#34;.&amp;#34; 1*digit
 port = *digit

 path = [ abs_path | opaque_part ]
 path_segments = segment *( &amp;#34;/&amp;#34; segment )
 segment = *pchar *( &amp;#34;;&amp;#34; param )
 param = *pchar
 pchar = unreserved | escaped |
 &amp;#34;:&amp;#34; | &amp;#34;@&amp;#34; | &amp;#34;&amp;amp;&amp;#34; | &amp;#34;=&amp;#34; | &amp;#34;+&amp;#34; | &amp;#34;$&amp;#34; | &amp;#34;,&amp;#34;

 query = *uric

 fragment = *uric
 
 uric = reserved | unreserved | escaped
 reserved = &amp;#34;;&amp;#34; | &amp;#34;/&amp;#34; | &amp;#34;?&amp;#34; | &amp;#34;:&amp;#34; | &amp;#34;@&amp;#34; | &amp;#34;&amp;amp;&amp;#34; | &amp;#34;=&amp;#34; | &amp;#34;+&amp;#34; |
 &amp;#34;$&amp;#34; | &amp;#34;,&amp;#34;
 unreserved = alphanum | mark
 mark = &amp;#34;-&amp;#34; | &amp;#34;_&amp;#34; | &amp;#34;.&amp;#34; | &amp;#34;!&amp;#34; | &amp;#34;~&amp;#34; | &amp;#34;*&amp;#34; | &amp;#34;&amp;#39;&amp;#34; |
 &amp;#34;(&amp;#34; | &amp;#34;)&amp;#34;

 escaped = &amp;#34;%&amp;#34; hex hex
 hex = digit | &amp;#34;A&amp;#34; | &amp;#34;B&amp;#34; | &amp;#34;C&amp;#34; | &amp;#34;D&amp;#34; | &amp;#34;E&amp;#34; | &amp;#34;F&amp;#34; |
 &amp;#34;a&amp;#34; | &amp;#34;b&amp;#34; | &amp;#34;c&amp;#34; | &amp;#34;d&amp;#34; | &amp;#34;e&amp;#34; | &amp;#34;f&amp;#34;

 alphanum = alpha | digit
 alpha = lowalpha | upalpha

 lowalpha = &amp;#34;a&amp;#34; | &amp;#34;b&amp;#34; | &amp;#34;c&amp;#34; | &amp;#34;d&amp;#34; | &amp;#34;e&amp;#34; | &amp;#34;f&amp;#34; | &amp;#34;g&amp;#34; | &amp;#34;h&amp;#34; | &amp;#34;i&amp;#34; |
 &amp;#34;j&amp;#34; | &amp;#34;k&amp;#34; | &amp;#34;l&amp;#34; | &amp;#34;m&amp;#34; | &amp;#34;n&amp;#34; | &amp;#34;o&amp;#34; | &amp;#34;p&amp;#34; | &amp;#34;q&amp;#34; | &amp;#34;r&amp;#34; |
 &amp;#34;s&amp;#34; | &amp;#34;t&amp;#34; | &amp;#34;u&amp;#34; | &amp;#34;v&amp;#34; | &amp;#34;w&amp;#34; | &amp;#34;x&amp;#34; | &amp;#34;y&amp;#34; | &amp;#34;z&amp;#34;
 upalpha = &amp;#34;A&amp;#34; | &amp;#34;B&amp;#34; | &amp;#34;C&amp;#34; | &amp;#34;D&amp;#34; | &amp;#34;E&amp;#34; | &amp;#34;F&amp;#34; | &amp;#34;G&amp;#34; | &amp;#34;H&amp;#34; | &amp;#34;I&amp;#34; |
 &amp;#34;J&amp;#34; | &amp;#34;K&amp;#34; | &amp;#34;L&amp;#34; | &amp;#34;M&amp;#34; | &amp;#34;N&amp;#34; | &amp;#34;O&amp;#34; | &amp;#34;P&amp;#34; | &amp;#34;Q&amp;#34; | &amp;#34;R&amp;#34; |
 &amp;#34;S&amp;#34; | &amp;#34;T&amp;#34; | &amp;#34;U&amp;#34; | &amp;#34;V&amp;#34; | &amp;#34;W&amp;#34; | &amp;#34;X&amp;#34; | &amp;#34;Y&amp;#34; | &amp;#34;Z&amp;#34;
 digit = &amp;#34;0&amp;#34; | &amp;#34;1&amp;#34; | &amp;#34;2&amp;#34; | &amp;#34;3&amp;#34; | &amp;#34;4&amp;#34; | &amp;#34;5&amp;#34; | &amp;#34;6&amp;#34; | &amp;#34;7&amp;#34; |
 &amp;#34;8&amp;#34; | &amp;#34;9&amp;#34;
&lt;/code>&lt;/pre>&lt;h2 id="参考">参考&lt;/h2>
&lt;p>&lt;a href="https://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/Global_Objects/encodeURIComponent">https://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/Global_Objects/encodeURIComponent&lt;/a>&lt;/p></description></item><item><title>JavaScript Comparison operation at a glance</title><link>https://davmig.github.io/posts/2019-03-28-javascript-comparison/</link><pubDate>Thu, 28 Mar 2019 09:00:00 +0000</pubDate><guid>https://davmig.github.io/posts/2019-03-28-javascript-comparison/</guid><description>&lt;p>When given a scenario like:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1&lt;/span>&lt;span>console.log(&lt;span style="color:#ff79c6">null&lt;/span> &lt;span style="color:#ff79c6">&amp;gt;&lt;/span> &lt;span style="color:#ff79c6">-&lt;/span>&lt;span style="color:#bd93f9">1&lt;/span>) &lt;span style="color:#6272a4">//true
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>It produces &lt;code>true&lt;/code>, which makes me think &lt;code>null&lt;/code> is treated as &lt;code>0&lt;/code>. But when I run:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1&lt;/span>&lt;span>console.log(&lt;span style="color:#ff79c6">null&lt;/span> &lt;span style="color:#ff79c6">==&lt;/span> &lt;span style="color:#bd93f9">0&lt;/span>) &lt;span style="color:#6272a4">// false
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2&lt;/span>&lt;span>&lt;span style="color:#6272a4">&lt;/span>console.log(&lt;span style="color:#ff79c6">null&lt;/span> &lt;span style="color:#ff79c6">&amp;gt;&lt;/span> &lt;span style="color:#bd93f9">0&lt;/span>) &lt;span style="color:#6272a4">// false
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">3&lt;/span>&lt;span>&lt;span style="color:#6272a4">&lt;/span>console.log(&lt;span style="color:#ff79c6">null&lt;/span> &lt;span style="color:#ff79c6">&amp;lt;&lt;/span> &lt;span style="color:#bd93f9">0&lt;/span>) &lt;span style="color:#6272a4">// false
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>They all output &lt;code>false&lt;/code>!&lt;/p>
&lt;p>I googled a lot and finally found answers in &lt;a href="http://www.ecma-international.org/ecma-262/8.0/#sec-abstract-equality-comparison">Ecma-262 Specification&lt;/a>.&lt;/p>
&lt;p>The comparison &lt;code>x == y&lt;/code>, where x and y are values, produces true or false. Such a comparison is performed as follows:&lt;/p></description></item><item><title>Js tips I can't remember</title><link>https://davmig.github.io/posts/2019-03-22-js-tips/</link><pubDate>Fri, 22 Mar 2019 09:00:00 +0000</pubDate><guid>https://davmig.github.io/posts/2019-03-22-js-tips/</guid><description>&lt;h2 id="__proto__-vs-prototype">&lt;code>__proto__&lt;/code> VS &lt;code>prototype&lt;/code>&lt;/h2>
&lt;blockquote>
&lt;p>&lt;code>__proto__&lt;/code> is the actual object that is used in the lookup chain to resolve methods and others. &lt;code>prototype&lt;/code> is the object that is used to build &lt;code>__proto__&lt;/code> when creating an object with &lt;code>new&lt;/code>.&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>The &amp;ldquo;cool kids&amp;rdquo; in JavaScript would generally pronounce &lt;code>__proto__&lt;/code> as &amp;ldquo;&lt;strong>dunder proto&lt;/strong>&amp;rdquo;.&lt;/p>
&lt;/blockquote>
&lt;p>&lt;a href="https://stackoverflow.com/questions/9959727/proto-vs-prototype-in-javascript">https://stackoverflow.com/questions/9959727/proto-vs-prototype-in-javascript&lt;/a>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1&lt;/span>&lt;span>( &lt;span style="color:#ff79c6">new&lt;/span> Foo ).__proto__ &lt;span style="color:#ff79c6">===&lt;/span> Foo.prototype; &lt;span style="color:#6272a4">// true
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2&lt;/span>&lt;span>&lt;span style="color:#6272a4">&lt;/span>( &lt;span style="color:#ff79c6">new&lt;/span> Foo ).prototype &lt;span style="color:#ff79c6">===&lt;/span> &lt;span style="color:#ff79c6">undefined&lt;/span>; &lt;span style="color:#6272a4">// true
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Bind specific arguments of a function</title><link>https://davmig.github.io/posts/2019-03-08-es6-bind-trick/</link><pubDate>Fri, 08 Mar 2019 09:00:00 +0000</pubDate><guid>https://davmig.github.io/posts/2019-03-08-es6-bind-trick/</guid><description>&lt;p>To bind specific (nth) arguments of a function, we can write a decorator instead of using &lt;code>Function.bind()&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-js" data-lang="js">&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1&lt;/span>&lt;span>&lt;span style="color:#8be9fd;font-style:italic">function&lt;/span> func(p1, p2, p3) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2&lt;/span>&lt;span> console.log(p1, p2, p3);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3&lt;/span>&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4&lt;/span>&lt;span>&lt;span style="color:#6272a4">// the binding starts after however many are passed in.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5&lt;/span>&lt;span>&lt;span style="color:#6272a4">&lt;/span>&lt;span style="color:#8be9fd;font-style:italic">function&lt;/span> decorator(...bound_args) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6&lt;/span>&lt;span> &lt;span style="color:#ff79c6">return&lt;/span> &lt;span style="color:#8be9fd;font-style:italic">function&lt;/span>(...args) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7&lt;/span>&lt;span> &lt;span style="color:#ff79c6">return&lt;/span> func(...args, ...bound_args);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8&lt;/span>&lt;span> };
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9&lt;/span>&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11&lt;/span>&lt;span>&lt;span style="color:#6272a4">// bind the last parameter
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12&lt;/span>&lt;span>&lt;span style="color:#6272a4">&lt;/span>&lt;span style="color:#8be9fd;font-style:italic">let&lt;/span> f &lt;span style="color:#ff79c6">=&lt;/span> decorator(&lt;span style="color:#f1fa8c">&amp;#34;3&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13&lt;/span>&lt;span>f(&lt;span style="color:#f1fa8c">&amp;#34;a&amp;#34;&lt;/span>, &lt;span style="color:#f1fa8c">&amp;#34;b&amp;#34;&lt;/span>); &lt;span style="color:#6272a4">// a b 3
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14&lt;/span>&lt;span>&lt;span style="color:#6272a4">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15&lt;/span>&lt;span>&lt;span style="color:#6272a4">// bind the last two parameter
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">16&lt;/span>&lt;span>&lt;span style="color:#6272a4">&lt;/span>&lt;span style="color:#8be9fd;font-style:italic">let&lt;/span> f2 &lt;span style="color:#ff79c6">=&lt;/span> decorator(&lt;span style="color:#f1fa8c">&amp;#34;2&amp;#34;&lt;/span>, &lt;span style="color:#f1fa8c">&amp;#34;3&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">17&lt;/span>&lt;span>f2(&lt;span style="color:#f1fa8c">&amp;#34;a&amp;#34;&lt;/span>); &lt;span style="color:#6272a4">// a 2 3
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Even if we want to bind just the nth argument, we can do as follows:&lt;/p></description></item><item><title>Object.assign() with accessor descriptor</title><link>https://davmig.github.io/posts/2019-03-08-object-assign-with-accessor-descriptor/</link><pubDate>Fri, 08 Mar 2019 09:00:00 +0000</pubDate><guid>https://davmig.github.io/posts/2019-03-08-object-assign-with-accessor-descriptor/</guid><description>&lt;p>&lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign#Copying_accessors">MDN docs:&lt;/a>&lt;/p>
&lt;blockquote>
&lt;p>The Object.assign() method only copies enumerable and own properties from a source object to a target object. It uses [[Get]] on the source and [[Set]] on the target, so it will invoke getters and setters. Therefore it assigns properties versus just copying or defining new properties. This may make it unsuitable for merging new properties into a prototype if the merge sources contain getters.&lt;/p>
&lt;/blockquote>
&lt;p>For example&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-js" data-lang="js">&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1&lt;/span>&lt;span>&lt;span style="color:#ff79c6">class&lt;/span> Cat {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2&lt;/span>&lt;span> constructor(name) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3&lt;/span>&lt;span> &lt;span style="color:#ff79c6">this&lt;/span>._name &lt;span style="color:#ff79c6">=&lt;/span> name;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4&lt;/span>&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6&lt;/span>&lt;span> get name() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7&lt;/span>&lt;span> &lt;span style="color:#ff79c6">return&lt;/span> &lt;span style="color:#ff79c6">this&lt;/span>._name;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8&lt;/span>&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9&lt;/span>&lt;span> set name(value) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10&lt;/span>&lt;span> &lt;span style="color:#ff79c6">this&lt;/span>._name &lt;span style="color:#ff79c6">=&lt;/span> value;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11&lt;/span>&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12&lt;/span>&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14&lt;/span>&lt;span>&lt;span style="color:#8be9fd;font-style:italic">let&lt;/span> nyannko &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#ff79c6">new&lt;/span> Cat(&lt;span style="color:#f1fa8c">&amp;#34;nyannko&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15&lt;/span>&lt;span>&lt;span style="color:#8be9fd;font-style:italic">let&lt;/span> copy &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#8be9fd;font-style:italic">Object&lt;/span>.assign({}, nyannko)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">16&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">17&lt;/span>&lt;span>console.log(nyannko.name) &lt;span style="color:#6272a4">// nyannko
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">18&lt;/span>&lt;span>&lt;span style="color:#6272a4">&lt;/span>console.log(copy.name) &lt;span style="color:#6272a4">// undefined
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The &lt;code>name&lt;/code> property is lost.&lt;/p></description></item><item><title>VueのNavigation Guards</title><link>https://davmig.github.io/posts/2019-01-19-vue-navigation-guards/</link><pubDate>Fri, 25 Jan 2019 09:00:00 +0000</pubDate><guid>https://davmig.github.io/posts/2019-01-19-vue-navigation-guards/</guid><description>&lt;p>Navigation guards are provided by &lt;code>vue-router&lt;/code>.
Three ways to hook:&lt;/p>
&lt;ul>
&lt;li>globally&lt;/li>
&lt;li>per-route&lt;/li>
&lt;li>in-component&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>NOTE:&lt;/strong>&lt;/p>
&lt;ol>
&lt;li>Params or query changes won&amp;rsquo;t trigger enter/leave navigation guards. You can either watch the &lt;code>$route&lt;/code> object to react to those changes, or use the &lt;code>beforeRouteUpdate&lt;/code> in-component guard.&lt;/li>
&lt;li>Make sure to always call the next function, otherwise the hook will never be resolved.&lt;/li>
&lt;/ol>
&lt;h2 id="global">Global&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-Javascript" data-lang="Javascript">&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1&lt;/span>&lt;span>&lt;span style="color:#ff79c6">const&lt;/span> router &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#ff79c6">new&lt;/span> VueRouter({ ... })
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3&lt;/span>&lt;span>&lt;span style="color:#6272a4">// Before Guards
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4&lt;/span>&lt;span>&lt;span style="color:#6272a4">&lt;/span>router.beforeEach((to, from, next) =&amp;gt; {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5&lt;/span>&lt;span> &lt;span style="color:#6272a4">// ...
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6&lt;/span>&lt;span>&lt;span style="color:#6272a4">&lt;/span>})
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8&lt;/span>&lt;span>&lt;span style="color:#6272a4">// Resolve Guards
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9&lt;/span>&lt;span>&lt;span style="color:#6272a4">// beforeResolve guards will be called right before the navigation is confirmed
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10&lt;/span>&lt;span>&lt;span style="color:#6272a4">// after all in-component guards and async route components are resolved
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11&lt;/span>&lt;span>&lt;span style="color:#6272a4">&lt;/span>router.beforeResolve((to, from, next) =&amp;gt; {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12&lt;/span>&lt;span> &lt;span style="color:#6272a4">// ...
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13&lt;/span>&lt;span>&lt;span style="color:#6272a4">&lt;/span>})
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15&lt;/span>&lt;span>&lt;span style="color:#6272a4">// After Hooks
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">16&lt;/span>&lt;span>&lt;span style="color:#6272a4">&lt;/span>router.afterEach((to, from) =&amp;gt; {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">17&lt;/span>&lt;span> &lt;span style="color:#6272a4">// ...
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">18&lt;/span>&lt;span>&lt;span style="color:#6272a4">&lt;/span>})
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="pre-reoute">Pre-reoute&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-Javascript" data-lang="Javascript">&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1&lt;/span>&lt;span>&lt;span style="color:#ff79c6">const&lt;/span> router &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#ff79c6">new&lt;/span> VueRouter({
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2&lt;/span>&lt;span> routes&lt;span style="color:#ff79c6">:&lt;/span> [
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3&lt;/span>&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4&lt;/span>&lt;span> path&lt;span style="color:#ff79c6">:&lt;/span> &lt;span style="color:#f1fa8c">&amp;#39;/foo&amp;#39;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5&lt;/span>&lt;span> component&lt;span style="color:#ff79c6">:&lt;/span> Foo,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6&lt;/span>&lt;span> beforeEnter&lt;span style="color:#ff79c6">:&lt;/span> (to, from, next) =&amp;gt; {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7&lt;/span>&lt;span> &lt;span style="color:#6272a4">// ...
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8&lt;/span>&lt;span>&lt;span style="color:#6272a4">&lt;/span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9&lt;/span>&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10&lt;/span>&lt;span> ]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11&lt;/span>&lt;span>})
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="in-component">In-component&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-Javascript" data-lang="Javascript">&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1&lt;/span>&lt;span>&lt;span style="color:#ff79c6">const&lt;/span> Foo &lt;span style="color:#ff79c6">=&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2&lt;/span>&lt;span> template&lt;span style="color:#ff79c6">:&lt;/span> &lt;span style="color:#f1fa8c">`...`&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3&lt;/span>&lt;span> beforeRouteEnter (to, from, next) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4&lt;/span>&lt;span> &lt;span style="color:#6272a4">// called before the route that renders this component is confirmed.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5&lt;/span>&lt;span>&lt;span style="color:#6272a4">&lt;/span> &lt;span style="color:#6272a4">// does NOT have access to `this` component instance,
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6&lt;/span>&lt;span>&lt;span style="color:#6272a4">&lt;/span> &lt;span style="color:#6272a4">// because it has not been created yet when this guard is called!
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7&lt;/span>&lt;span>&lt;span style="color:#6272a4">&lt;/span> &lt;span style="color:#6272a4">// However, you can access the instance by passing a callback to next. 
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8&lt;/span>&lt;span>&lt;span style="color:#6272a4">&lt;/span> &lt;span style="color:#6272a4">// The callback will be called when the navigation is confirmed
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9&lt;/span>&lt;span>&lt;span style="color:#6272a4">&lt;/span> &lt;span style="color:#6272a4">// and the component instance will be passed to the callback as the argument
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10&lt;/span>&lt;span>&lt;span style="color:#6272a4">&lt;/span> beforeRouteEnter (to, from, next) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">11&lt;/span>&lt;span> next(vm =&amp;gt; {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">12&lt;/span>&lt;span> &lt;span style="color:#6272a4">// access to component instance via `vm`
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">13&lt;/span>&lt;span>&lt;span style="color:#6272a4">&lt;/span> })
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">14&lt;/span>&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">15&lt;/span>&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">16&lt;/span>&lt;span> beforeRouteUpdate (to, from, next) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">17&lt;/span>&lt;span> &lt;span style="color:#6272a4">// called when the route that renders this component has changed,
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">18&lt;/span>&lt;span>&lt;span style="color:#6272a4">&lt;/span> &lt;span style="color:#6272a4">// but this component is reused in the new route.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">19&lt;/span>&lt;span>&lt;span style="color:#6272a4">&lt;/span> &lt;span style="color:#6272a4">// For example, for a route with dynamic params `/foo/:id`, when we
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">20&lt;/span>&lt;span>&lt;span style="color:#6272a4">&lt;/span> &lt;span style="color:#6272a4">// navigate between `/foo/1` and `/foo/2`, the same `Foo` component instance
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">21&lt;/span>&lt;span>&lt;span style="color:#6272a4">&lt;/span> &lt;span style="color:#6272a4">// will be reused, and this hook will be called when that happens.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">22&lt;/span>&lt;span>&lt;span style="color:#6272a4">&lt;/span> &lt;span style="color:#6272a4">// has access to `this` component instance.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">23&lt;/span>&lt;span>&lt;span style="color:#6272a4">&lt;/span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">24&lt;/span>&lt;span> beforeRouteLeave (to, from, next) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">25&lt;/span>&lt;span> &lt;span style="color:#6272a4">// called when the route that renders this component is about to
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">26&lt;/span>&lt;span>&lt;span style="color:#6272a4">&lt;/span> &lt;span style="color:#6272a4">// be navigated away from.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">27&lt;/span>&lt;span>&lt;span style="color:#6272a4">&lt;/span> &lt;span style="color:#6272a4">// has access to `this` component instance.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">28&lt;/span>&lt;span>&lt;span style="color:#6272a4">&lt;/span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">29&lt;/span>&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="resolve-flow">Resolve flow&lt;/h2>
&lt;ul>
&lt;li>Navigation triggered.&lt;/li>
&lt;li>Call leave guards in deactivated components.&lt;/li>
&lt;li>Call global beforeEach guards.&lt;/li>
&lt;li>Call beforeRouteUpdate guards in reused components.&lt;/li>
&lt;li>Call beforeEnter in route configs.&lt;/li>
&lt;li>Resolve async route components.&lt;/li>
&lt;li>Call beforeRouteEnter in activated components.&lt;/li>
&lt;li>Call global beforeResolve guards.&lt;/li>
&lt;li>Navigation confirmed.&lt;/li>
&lt;li>Call global afterEach hooks.&lt;/li>
&lt;li>DOM updates triggered.&lt;/li>
&lt;li>Call callbacks passed to next in beforeRouteEnter guards with instantiated instances.&lt;/li>
&lt;/ul></description></item><item><title>ES6について</title><link>https://davmig.github.io/posts/2019-01-18-es6/</link><pubDate>Fri, 18 Jan 2019 16:00:00 +0000</pubDate><guid>https://davmig.github.io/posts/2019-01-18-es6/</guid><description>&lt;h2 id="overview">Overview&lt;/h2>
&lt;p>&lt;a href="https://github.com/lukehoban/es6features#readme">https://github.com/lukehoban/es6features#readme&lt;/a>&lt;/p>
&lt;p>&lt;a href="http://help.wtf/es6">http://help.wtf/es6&lt;/a>&lt;/p>
&lt;p>&lt;a href="http://es6-features.org">http://es6-features.org&lt;/a>&lt;/p>
&lt;h2 id="string">String&lt;/h2>
&lt;h3 id="stringx-is-deprecated-use-stringprototypex-instead">String.x is deprecated; use String.prototype.x instead.&lt;/h3>
&lt;p>非推奨の構文:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-Javascript" data-lang="Javascript">&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1&lt;/span>&lt;span>&lt;span style="color:#8be9fd;font-style:italic">var&lt;/span> num &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#bd93f9">15&lt;/span>; 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2&lt;/span>&lt;span>&lt;span style="color:#8be9fd;font-style:italic">String&lt;/span>.replace(num, &lt;span style="color:#f1fa8c">/5/&lt;/span>, &lt;span style="color:#f1fa8c">&amp;#39;2&amp;#39;&lt;/span>);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>標準の構文:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-Javascript" data-lang="Javascript">&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1&lt;/span>&lt;span>&lt;span style="color:#8be9fd;font-style:italic">var&lt;/span> num &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#bd93f9">15&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">2&lt;/span>&lt;span>&lt;span style="color:#8be9fd;font-style:italic">String&lt;/span>(num).replace(&lt;span style="color:#f1fa8c">/5/&lt;/span>, &lt;span style="color:#f1fa8c">&amp;#39;2&amp;#39;&lt;/span>);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="template-literal">Template literal&lt;/h3>
&lt;p>Nesting templates:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-Javascript" data-lang="Javascript">&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1&lt;/span>&lt;span>&lt;span style="color:#ff79c6">const&lt;/span> classes &lt;span style="color:#ff79c6">=&lt;/span> &lt;span style="color:#f1fa8c">`header &lt;/span>&lt;span style="color:#f1fa8c">${&lt;/span> isLargeScreen() &lt;span style="color:#ff79c6">?&lt;/span> &lt;span style="color:#f1fa8c">&amp;#39;&amp;#39;&lt;/span> &lt;span style="color:#ff79c6">:&lt;/span> &lt;span style="color:#f1fa8c">`icon-&lt;/span>&lt;span style="color:#f1fa8c">${&lt;/span>item.isCollapsed &lt;span style="color:#ff79c6">?&lt;/span> &lt;span style="color:#f1fa8c">&amp;#39;expander&amp;#39;&lt;/span> &lt;span style="color:#ff79c6">:&lt;/span> &lt;span style="color:#f1fa8c">&amp;#39;collapser&amp;#39;&lt;/span>&lt;span style="color:#f1fa8c">}&lt;/span>&lt;span style="color:#f1fa8c">`&lt;/span> &lt;span style="color:#f1fa8c">}&lt;/span>&lt;span style="color:#f1fa8c">`&lt;/span>;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item></channel></rss>